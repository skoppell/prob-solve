1. First Bad version 
    - 3 types of Bin Search
    
    - left = 0, right = lenght-1;
    while(left<=right){
        mid = Math.floor(left + (right-left/2));
        if(satisfied) retrun mid;
        if(target > mid) left = mid+1;
        if(target < mid ) right = mid-1; 
    }
    return -1;

    - left = 0, right = length;
    while(left < right){
        if(satisfied) return mid;
        if(target > mid) left = mid+1;
        if(target < mid) right = mid; 
    }
    if(left index satisfies) return left;  // left == right.
    return -1;


    - left=0;right=length;
    while(left+1 < right){
        if(satisfied) return mid;
        if(target > mid) left = mid;
        if(target < mid) right = mid;
    }
    if(left index satisfies) return left;
    if(right index satisfies) return right;
    return -1;

6. Majority Elem. 
    - Random index and then couting if the num at that index is majorith .. will give linear time. (thought theoritically it of order infinity)

7. cousins in binary tree 
    - brute force is to do DFS of two values and check
    - improvement can be ..when doing above DFS, if one is found at level L1 .. then ... when doin DFS for next value any thing above L1 level is false. 
    - but cuz this is more like searching at each leve, BFS is better.
    - push a delimiter when parent node changes.

8. lines in same line. 
    - check if slope is same. (y2-y1)/(x2-x1).
    - handel if x2-x1 == 0 case. (not required for js as it returns Infinity)

10. if the prob is represented as graph, essentailly we are intrested in a node ..which has 0 outdegree and N-1 indegree.
    so .. we can maintain two arrays .. and check for those. 
    or maintain a single array .. to store the diff and finally check .. which index has a value of N-1  => (N-1) - (0).  (out minus in degree)